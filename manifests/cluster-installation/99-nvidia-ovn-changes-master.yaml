apiVersion: machineconfiguration.openshift.io/v1
kind: MachineConfig
metadata:
  name: 99-nvidia-ovn-changes-master
  labels:
    machineconfiguration.openshift.io/role: master
spec:
  config:
    ignition:
      version: 3.1.0
    systemd:
      units:
        - name: shutdown-interface-51.service
          enabled: true
          contents: |
            [Unit]
            Description=Shutdown interface with MAC ending in 51 to prevent dual IPs on br-ex
            After=network.target NetworkManager.service nmstate.service
            Wants=NetworkManager.service
            Before=ovs-configuration.service
            
            [Service]
            Type=oneshot
            ExecStart=/usr/local/bin/shutdown-interface-51.sh
            RemainAfterExit=yes
            
            [Install]
            WantedBy=multi-user.target
        - name: restart-ovs-vswitchd.service
          enable: true
          contents: |
            [Unit]
            Description=Restart ovs-vswitchd after 3 minutes after kubelet
            Wants=network-online.target kubelet.service
            
            [Service]
            Type=oneshot
            ExecStart=/bin/bash -c 'sleep 180; systemctl restart ovs-vswitchd.service'
            
            [Install]
            WantedBy=multi-user.target
        - name: ovs-configuration.service
          enabled: true
          contents: |
            [Unit]
            # Kdump will generate it's initramfs based on the running state when kdump.service run
            # If OVS has already run, the kdump fails to gather a working network config,
            # which prevent network log exports, sush as SSH.
            # See https://issues.redhat.com/browse/OCPBUGS-28239
            After=kdump.service shutdown-interface-51.service
            Description=Configures OVS with proper host networking configuration
            # This service is used to move a physical NIC into OVS and reconfigure OVS to use the host IP
            Requires=openvswitch.service
            Wants=NetworkManager-wait-online.service
            After=firstboot-osupdate.target
            After=NetworkManager-wait-online.service openvswitch.service network.service nodeip-configuration.service nmstate.service shutdown-interface-51.service
            Before=kubelet-dependencies.target node-valid-hostname.service

            [Service]
            # Need oneshot to delay kubelet
            Type=oneshot
            ExecStart=/usr/local/bin/configure-ovs.sh OVNKubernetes
            StandardOutput=journal+console
            StandardError=journal+console

            [Install]
            RequiredBy=kubelet-dependencies.target
        - name: "openvswitch.service"
          enabled: true

        - name: "ovsdb-server.service"
          enabled: true
          dropins:
          - name: 10-ovsdb-restart.conf
            contents: |
              [Service]
              Restart=always

        - contents: |
            [Unit]
            Description=Kubernetes Kubelet
            Requires=crio.service kubelet-dependencies.target
            After=kubelet-dependencies.target
            After=ostree-finalize-staged.service
  
            [Service]
            Type=notify
            ExecStartPre=/bin/mkdir --parents /etc/kubernetes/manifests
            ExecStartPre=-/usr/sbin/restorecon -rv /var/lib/kubelet/ /usr/local/bin/kubenswrapper /usr/bin/kubensenter
            Environment="KUBELET_NODE_IP=0.0.0.0"
            EnvironmentFile=/etc/os-release
            EnvironmentFile=-/etc/kubernetes/kubelet-workaround
            EnvironmentFile=-/etc/kubernetes/kubelet-env
            EnvironmentFile=/etc/node-sizing.env
  
            ExecStart=/usr/local/bin/kubenswrapper \
            /usr/bin/kubelet \
            --config=/etc/kubernetes/kubelet.conf \
            --bootstrap-kubeconfig=/etc/kubernetes/kubeconfig \
            --kubeconfig=/var/lib/kubelet/kubeconfig \
            --container-runtime-endpoint=/var/run/crio/crio.sock \
            --runtime-cgroups=/system.slice/crio.service \
            --node-labels=node-role.kubernetes.io/control-plane,node-role.kubernetes.io/master,node.openshift.io/os_id=${ID},k8s.ovn.org/zone-name="%H" \
            --node-ip=${KUBELET_NODE_IP} \
            --minimum-container-ttl-duration=6m0s \
            --cloud-provider= \
            --volume-plugin-dir=/etc/kubernetes/kubelet-plugins/volume/exec \
            \
            --hostname-override=${KUBELET_NODE_NAME} \
            --provider-id=${KUBELET_PROVIDERID} \
            --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \
            --pod-infra-container-image=quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:4c66ed7d92217db9126393d3c8e9e7ed6e5ea084b5a0bb3f60321da89b29fede \
            --system-reserved=cpu=${SYSTEM_RESERVED_CPU},memory=${SYSTEM_RESERVED_MEMORY},ephemeral-storage=${SYSTEM_RESERVED_ES} \
            --v=${KUBELET_LOG_LEVEL}
  
            Restart=always
            RestartSec=10
  
            [Install]
            WantedBy=multi-user.target
          enabled: true
          name: kubelet.service
    storage:
      files:
        - path: /usr/local/bin/shutdown-interface-51.sh
          mode: 0755
          overwrite: true
          contents:
            inline: |
              #!/bin/bash
              
              # Script to shutdown interface with MAC ending in :51 using nmstate
              # This prevents dual IP addresses on br-ex by ensuring only the :50 interface is active
              # Runs on master nodes before OVS configuration
              
              set -e
              
              echo "$(date): Starting interface shutdown check for MAC ending in :51"
              
              # Wait for network to be ready
              WAIT_INTERVAL=5
              MAX_ATTEMPTS=12  # 1 minute total wait
              ATTEMPT=1
              
              while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
                  if ip link show &>/dev/null; then
                      echo "$(date): Network interfaces are available"
                      break
                  fi
                  echo "$(date): Waiting for network interfaces... (attempt $ATTEMPT/$MAX_ATTEMPTS)"
                  sleep $WAIT_INTERVAL
                  ATTEMPT=$((ATTEMPT + 1))
              done
              
              if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
                  echo "$(date): Timeout waiting for network interfaces, continuing anyway"
              fi
              
              # Find interface with MAC ending in :51
              INTERFACE_51=""
              for iface in $(ip link show | grep -E '^[0-9]+:' | awk -F': ' '{print $2}' | grep -v lo); do
                  # Clean interface name (remove @if suffix if present)
                  clean_iface=$(echo "$iface" | cut -d'@' -f1)
                  
                  # Get MAC address
                  mac=$(ip link show "$clean_iface" 2>/dev/null | grep -o -E '([[:xdigit:]]{2}:){5}[[:xdigit:]]{2}' | head -1)
                  
                  if [[ "$mac" =~ :51$ ]]; then
                      INTERFACE_51="$clean_iface"
                      echo "$(date): Found interface $INTERFACE_51 with MAC $mac (ends in :51)"
                      break
                  fi
              done
              
              if [ -z "$INTERFACE_51" ]; then
                  echo "$(date): No interface found with MAC ending in :51, exiting successfully"
                  exit 0
              fi
              
              # Check if interface is already down
              state=$(ip link show "$INTERFACE_51" | grep -o "state [A-Z]*" | cut -d' ' -f2)
              if [ "$state" = "DOWN" ]; then
                  echo "$(date): Interface $INTERFACE_51 is already DOWN, no action needed"
                  exit 0
              fi
              
              echo "$(date): Interface $INTERFACE_51 is $state, shutting it down with nmstate..."
              
              # Create temporary nmstate config to shut down the interface
              TMP_FILE=$(mktemp)
              cat > "$TMP_FILE" << EOF
              interfaces:
                - name: $INTERFACE_51
                  type: ethernet
                  state: down
              EOF
              
              echo "$(date): Applying nmstate configuration to shutdown $INTERFACE_51..."
              echo "Configuration:"
              cat "$TMP_FILE"
              
              # Apply the configuration
              if nmstatectl apply "$TMP_FILE" 2>&1; then
                  echo "$(date): Successfully shut down interface $INTERFACE_51"
                  
                  # Verify the interface is down
                  sleep 2
                  new_state=$(ip link show "$INTERFACE_51" | grep -o "state [A-Z]*" | cut -d' ' -f2)
                  echo "$(date): Interface $INTERFACE_51 state after shutdown: $new_state"
                  
                  if [ "$new_state" = "DOWN" ]; then
                      echo "$(date): Verification successful - interface is DOWN"
                  else
                      echo "$(date): Warning - interface state is $new_state, not DOWN"
                  fi
              else
                  echo "$(date): Failed to shut down interface $INTERFACE_51"
                  rm "$TMP_FILE"
                  exit 1
              fi
              
              # Clean up
              rm "$TMP_FILE"
              
              echo "$(date): Interface shutdown process completed successfully"
              exit 0
        - path: /etc/sysconfig/openvswitch
          mode: 0644
          overwrite: true
          contents:
            source: data:text/plain;charset=utf-8;base64,T1ZTX1VTRVJfSUQ9InJvb3Q6cm9vdCI=
        - path: /etc/NetworkManager/dispatcher.d/pre-up.d/12-ofport-request.sh
          mode: 0644
          overwrite: false
          contents:
            inline: |
              #!/bin/bash
              # Set interface ofport_request to guarantee stable ofport numbers. This is important for flow matches.
              # Otherwise, another ofport number is assigned to the interface on every restart of NetworkManager.
              # This script will build an associative array INTERFACE_NAME->ofport_request and will save it to file CONFIGURATION_FILE.
              # When an interface is brought up, this will reuse the value from the associative array if such a value exists.
              # Otherwise, this will try to use the current ofport value. If the ofport value is already reserved, then
              # this uses the lowest available numerical value, instead.
              set -eux -o pipefail

              INTERFACE_NAME=$1
              OPERATION=$2

              # Only execute this on pre-up
              if [ "${OPERATION}" != "pre-up" ]; then
                  exit 0
              fi

              # Get the interface's NM uuid
              INTERFACE_CONNECTION_UUID=$(nmcli -t -f device,type,uuid conn | awk -F ':' '{if($1=="'${INTERFACE_NAME}'" && $2!~/^ovs*/) print $NF}')
              if [ "${INTERFACE_CONNECTION_UUID}" == "" ]; then
                  exit 0
              fi

              # Get the interface's slave-type. If this is not an ovs-port, then exit
              INTERFACE_OVS_SLAVE_TYPE=$(nmcli -t -f connection.slave-type conn show "${INTERFACE_CONNECTION_UUID}" | awk -F ':' '{print $NF}')
              if [ "${INTERFACE_OVS_SLAVE_TYPE}" != "ovs-port" ]; then
                  exit 0
              fi

              # This is not necessarily a UUID (can be a name in case of bonds) but this should be unique
              PORT=$(nmcli -t -f connection.master conn show "${INTERFACE_CONNECTION_UUID}" | awk -F ':' '{print $NF}')
              if [ "${PORT}" == "" ]; then
                  exit 0
              fi

              # Get the interface's NM uuid
              PORT_CONNECTION_UUID=$(nmcli -t -f device,type,uuid conn | awk -F ':' '{if( ($1=="'${PORT}'" || $3=="'${PORT}'") && $2~/^ovs*/) print $NF}')
              if [ "${PORT_CONNECTION_UUID}" == "" ]; then
                  exit 0
              fi

              # Get the port's slave-type. If this is not an ovs-bridge, then exit
              PORT_OVS_SLAVE_TYPE=$(nmcli -t -f connection.slave-type conn show "${PORT_CONNECTION_UUID}" | awk -F ':' '{print $NF}')
              if [ "${PORT_OVS_SLAVE_TYPE}" != "ovs-bridge" ]; then
                  exit 0
              fi

              # Get the port's master. If it doesn't have any, assume it's not our bridge
              BRIDGE_ID=$(nmcli -t -f connection.master conn show "${PORT_CONNECTION_UUID}" | awk -F ':' '{print $NF}')
              if [ "${BRIDGE_ID}" == "" ]; then
                  exit 0
              fi

              # Get the bridge name
              BRIDGE_NAME=$(nmcli -t -f connection.interface-name conn show "${BRIDGE_ID}" | awk -F ':' '{print $NF}')
              # Limit this to br-ex and br-ex1 only. If one wanted to enable this for all OVS bridges,
              # the condition would be: if [ "$BRIDGE_NAME" == "" ]; then
              if [ "${BRIDGE_NAME}" != "br-ex" ] && [ "${BRIDGE_NAME}" != "br-ex1" ]; then
                  exit 0
              fi

              # Make sure that the interface is plugged into OVS
              # This should always be the case given that we are in pre-up, but exit gracefully in the odd case that it's not
              if ! ovs-vsctl list interface "${INTERFACE_NAME}" >/dev/null 2>&1; then
                  exit 0
              fi

              CONFIGURATION_FILE="/run/ofport_requests.${BRIDGE_NAME}"

              # Declare a new associative array. If CONFIGURATION_FILE exists, source entries from there
              declare -A INTERFACES
              if [ -f "${CONFIGURATION_FILE}" ]; then
                  echo "Sourcing configuration file '${CONFIGURATION_FILE}' with contents:"
                  cat "${CONFIGURATION_FILE}"
                  source "${CONFIGURATION_FILE}"
              fi

              # get_interface_ofport_request will return
              # * either: the current ofport assignment for the port if no interface has claimed this ofport number, yet
              # * or:     the lowest available free ofport number
              function get_interface_ofport_request() {
                  # Build an array that only contains the currently reserved ofport_requests
                  declare -A ofport_requests
                  for interface_name in "${!INTERFACES[@]}"; do
                      ofport_requests[${INTERFACES[$interface_name]}]=${INTERFACES[$interface_name]}
                  done

                  # Get the current ofport number assignment
                  local current_ofport=$(ovs-vsctl get Interface "${INTERFACE_NAME}" ofport)

                  # If the current ofport number is still free, use it
                  if ! [ "${ofport_requests[$current_ofport]+a}" ]; then
                      echo $current_ofport
                      return
                  fi

                  # If the current ofport number is not free, return the lowest free entry
                  i=0
                  for i in {1..65000}; do
                      if ! [ "${ofport_requests[$i]+a}" ]; then
                          echo $i
                          return
                      fi
                  done

                  # if we still cannot find an ID, exit with an error
                  echo "Impossible to find an ofport ID for interface ${INTERFACE_NAME}" >&2
                  exit 1
              }

              # If INTERFACES[INTERFACE_NAME] exists, use that value
              # If INTERFACES[INTERFACE_NAME] does not exists, use the value from get_interface_ofport_request
              if ! [ "${INTERFACES[$INTERFACE_NAME]+a}" ]; then
                  INTERFACES[$INTERFACE_NAME]=$(get_interface_ofport_request)
              fi
              # Set ofport_request according to INTERFACES[INTERFACE_NAME]
              ovs-vsctl set Interface "${INTERFACE_NAME}" ofport_request=${INTERFACES[$INTERFACE_NAME]}

              # Save current state of INTERFACES to CONFIGURATION_FILE
              declare -p INTERFACES >| "${CONFIGURATION_FILE}"
